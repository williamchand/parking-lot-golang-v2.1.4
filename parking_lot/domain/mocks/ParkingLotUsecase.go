// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/williamchand/parking-lot-golang-v2.1.4/parking_lot/domain"
)

// ParkingLotUsecase is an autogenerated mock type for the ParkingLotUsecase type
type ParkingLotUsecase struct {
	mock.Mock
}

// CreateParkingLot provides a mock function with given fields: ctx, slots
func (_m *ParkingLotUsecase) CreateParkingLot(ctx context.Context, slots int64) error {
	ret := _m.Called(ctx, slots)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, slots)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchCarsSlot provides a mock function with given fields: ctx, colour
func (_m *ParkingLotUsecase) FetchCarsSlot(ctx context.Context, colour string) ([]string, error) {
	ret := _m.Called(ctx, colour)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, colour)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, colour)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchRegistrationNumber provides a mock function with given fields: ctx, colour
func (_m *ParkingLotUsecase) FetchRegistrationNumber(ctx context.Context, colour string) ([]string, error) {
	ret := _m.Called(ctx, colour)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, colour)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, colour)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchStatus provides a mock function with given fields: ctx
func (_m *ParkingLotUsecase) FetchStatus(ctx context.Context) ([]domain.ParkingLot, error) {
	ret := _m.Called(ctx)

	var r0 []domain.ParkingLot
	if rf, ok := ret.Get(0).(func(context.Context) []domain.ParkingLot); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ParkingLot)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIdByRegistrationNumber provides a mock function with given fields: ctx, registrationNumber
func (_m *ParkingLotUsecase) GetIdByRegistrationNumber(ctx context.Context, registrationNumber string) (int64, error) {
	ret := _m.Called(ctx, registrationNumber)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, registrationNumber)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, registrationNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OccupyParkingLot provides a mock function with given fields: ctx, registrationNumber, colour
func (_m *ParkingLotUsecase) OccupyParkingLot(ctx context.Context, registrationNumber string, colour string) (int64, error) {
	ret := _m.Called(ctx, registrationNumber, colour)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string, string) int64); ok {
		r0 = rf(ctx, registrationNumber, colour)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, registrationNumber, colour)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnOccupyParkingLot provides a mock function with given fields: ctx, id
func (_m *ParkingLotUsecase) UnOccupyParkingLot(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
